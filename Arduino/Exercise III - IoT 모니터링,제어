#include <VitconBrokerComm.h>
#include <SoftPWM.h>
using namespace vitcon;

SOFTPWM_DEFINE_CHANNEL(A3);

bool fan_out_status;
bool timeset = false;
bool Interval_Hup_status;
bool Interval_Mup_status;


int Hour = 0;
int Minute = 1;

uint32_t PWM = 60;
uint32_t TimeSum = 0;
uint32_t TimeCompare;
uint32_t TimePushDelay = 0;
uint32_t TimerStartTime = 0;

void fan_pwm_out(int32_t var) {
    PWM = var;
}

void fan_out(bool var) {
    fan_out_status = var;
}

void timeset_out(bool val) {
    timeset = val;
}

void Interval_Hup(bool val) {
    Interval_Hup_status = val;
}
void Interval_Mup(bool val) {
    Interval_Mup_status = val;
}

void IntervalReset(bool val) {
    if (!timeset && val)
    {
        Hour = 0;
        Minute = 0;
    }
}

IOTItemBin FanStatus;
IOTItemBin Fan(fan_out);
IOTItemInt FanPwmValue;             
IOTItemInt FanPwm(fan_pwm_out);     
IOTItemInt FanPwmGraph;

IOTItemBin StopStatus;
IOTItemBin Stop(timeset_out);

IOTItemBin IntervalHUP(Interval_Hup);
IOTItemBin IntervalMUP(Interval_Mup);
IOTItemBin IntervalRST(IntervalReset);

IOTItemInt label_Hinterval;
IOTItemInt label_Minterval;

#define ITEM_COUNT 12

IOTItem *items[ITEM_COUNT] = {
  &FanStatus, &Fan,
  &FanPwmValue, &FanPwm, &FanPwmGraph,
  &StopStatus, &Stop,
  &label_Hinterval, &label_Minterval,
  &IntervalHUP, &IntervalMUP, &IntervalRST
  };

const char device_id[] = "68f69a8da56d06999f8b88892469858d";
BrokerComm comm(&Serial, device_id, items, ITEM_COUNT);

void setup() {
    Serial.begin(250000);
    comm.SetInterval(200);

    SoftPWM.begin(490);
}

void IntervalSet(bool timeset) {
    if (!timeset) {
        TimeSum = (uint32_t)(Hour * 60 + Minute)* 60 * 1000;
        TimerStartTime = millis();

        if (millis() > TimePushDelay + 500) {
            Hour += Interval_Hup_status;
            if (Hour >= 24)
                Hour = 0;
            Minute += Interval_Mup_status;
            if (Minute >= 60)
                Minute = 0;

            TimePushDelay = millis();
        }
    }

    else if (timeset) {
        TimeCompare = (millis() - TimerStartTime) / TimeSum;
    }
}

void loop() {

    if (fan_out_status == true) {
        IntervalSet(timeset);

        if (timeset) {
            if (TimeCompare < 1) {
                SoftPWM.set(PWM);
            }
            else {
                SoftPWM.set(0);
            }
        }
        else {
            SoftPWM.set(PWM);
        }
    }
    else {
        SoftPWM.set(0);
    }

    FanPwmValue.Set(PWM);
    FanPwmGraph.Set(PWM);
    FanStatus.Set(fan_out_status);
    StopStatus.Set(timeset);
    label_Hinterval.Set(Hour);
    label_Minterval.Set(Minute);
    comm.Run();
}
